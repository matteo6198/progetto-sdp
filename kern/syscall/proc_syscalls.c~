#include <proc_syscalls.h>
#include <opt-proc_manage.h>
#include <synch.h>

void sys__exit(int code){
  struct thread *actual_thread = curthread;
  struct proc *actual_proc = actual_thread->t_proc;
  KASSERT(actual_proc != NULL);
#if !OPT_PROC_MANAGE
  struct addrspace* actual_as = proc_getas();
  KASSERT(actual_as != NULL);
#endif
  /* save exit satus of the process and thread */
  actual_proc->exit_status = code;
  actual_thread->exit_status = code;
#if OPT_PROC_MANAGE
  /* detach thread */
  proc_remthread(actual_thread);
  /* signal exit */
  V(actual_proc->ended_sem);
#endif
  /* exit from the thread (it does not destroy it 
   * but it will be after the switch */
  thread_exit();

#if !OPT_PROC_MANAGE
  /* destroy address space */
  as_destroy(actual_as);
  /* destroy the process */
  proc_destroy(actual_proc);
#endif
}


#if OPT_PROC_MANAGE
pid_t sys_waitpid(pid_t pid, int* status, int options){

  return pid;
}

#endif
